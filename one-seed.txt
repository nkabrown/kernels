ALL ABOUT VARIABLES AND FUNCTIONS

the world of variables

Most introductions to programming in a specific language begin with values and
their associated types. This book does not and I believe it's because of its
language independent approach. We skip a discussion of values and immediately
move to the world of variables.

What is a variable? Very succinctly it's a shortcut to a value and it saves
programmers from having to remember and retype values. Variables are a way for
programmers to reduce redundancy in their programs.

But where do you begin to try to understand the ins & outs of variables? I'm
going to start with variable declaration because all three fundamental concepts
that underlie the word 'variable' are involved in variable creation. *Variable
declaraton through the environment binds an identifier to a variable in memory.*
First, let's create a seperation to divide variables in memory from identifiers
and environments. The variable in memory remains invisible to the programmer
while the identifiers and environments become the programmer's tools to interact
with these invisible store variables.  The variable in memory is used to store a
value.  Remember depending on the computation model being followed variables in
memory can have different properties. Variable identifiers are our means of
accessing the variables in memory. On variable creation the identifier is
associated with the variable in memory by the environment which links them
together. The environment is a function that maps an identifier to a store
variable and its bound value. E(X) = x. 'The program region in which an
identifier refers to a particular variable is called the scope of the
identifier. Outside of the scope the identifier does not mean the same thing.'
'The scope of an identifier occurance is that part of the program text for which
the occurance corresponds to the same variable declaration.' Scope is an issue
for the programmer because the same identifier can reference different values in
different parts of the program.

Is using the container metaphor for variables a 'concept' smell? Dividng
identifiers and environments from variables in memory helps deflect that
question. If variables are a shortcut to values then we can focus on values and
the tools that allow us to reach them. Those tools are identifiers and
environments, neither of which 'contain' variables.

functions

Just as the concept of variables allows you to avoid redundancy, the ability to
define functions allow you to avoid repitition. Functions are the standard unit
of code reuse. In the terminology of this course functions are shortcuts for
program code to execute and as a shortcut to values functions can be bound to a
variable as well.

Function coposition is a speical case of function definition. Function
composition is defining a function in terms of other functions. It allows you to
build your program in layers. Each function calls functions in the layer below.
How do we build a program out of functions? Function composition allows us to
create functions that call other functions and enable us to build ever deeper
layers into programs based on these smaller components.

'You have a function f that takes an argument of type A and returns a B. You
have another function g that takes a B and returns a C. You can compose them by
passing the result of f to g. You have just defined a new function that takes an
A and returns a C.

In math, such a composition is denoted by a small circle between functions: g∘f.
Notice the right to left order of composition....It helps if you read g∘f as "g
after f."' Bartosz Milewski

A recursive function is a function that calls itself. Its possible to do this if
the function calls itself with a smaller value. Recursive functions are a
demonstration of the divide and conquer technique, i.e., divide a complex
problem into simpler subproblems.

functional paradigm

The functional paradigm is the ability to calculate with numbers, to define
functions, to do function composition and recursion, and to use the conditional
(if) statement.
